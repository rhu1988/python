def in_random_order(data):
    """generator that returns the elements of data in random order"""
    indexes=[i for i,_ in enumerate(data)] #create a list of indexes
    random.shuffle(indexes)                #shuffle them
    for i in indexes:
        yield data[i]                      #return the data in that order
        
def minimize_stochastic(target_fn,gradient_fn,x,y,theta_0,alpha_0=0.01)
    data=zip(x,y)
    theta=theta_0
    alpha=alpha_0
    min_theta,min_value=None,float("inf")
    iterations_with_no_improvement=0
    
    #if we ever go 100 iterations with no improvement, stop
    while iterations_with_no_improvement<100:
          value=sum(target_fn(x_i,y_i,theta) for x_i,y_i in data)
          
          if value<min_value:
             min_theta,min_value=theta,value
             iterations_with_no_improvement=0
             alpha=alpha_0
          else:
             iterations_with_no_improvement+=1
             alpha*=0.9
     #and take a gradient step for each of the data points
     for x_i, y_i in in_random_order(data):
         gradient_i=gradient_fn(x_i,y_i,theta)
         theta=vector_substract(theta, scalar_multiply(alpha,gradient_i))
return min_theta         
